
#include "lllm/analyzer/ASTIO.hpp"

#include <iostream>

using namespace lllm;

std::ostream& analyzer::operator<<( std::ostream& os, ConstASTPtr ast ) {
	return os << (*ast);
}
std::ostream& analyzer::operator<<( std::ostream& os, ConstASTRef ast ) {
	struct Visitor {
		void visit( ConstNilRef      ast, std::ostream& os ) const { os << "()"; }
		void visit( ConstIntRef      ast, std::ostream& os ) const { os << ast.value; }
		void visit( ConstRealRef     ast, std::ostream& os ) const { os << ast.value; }
		void visit( ConstCharRef     ast, std::ostream& os ) const {
			switch ( ast.value ) {
				case '\t': os << "\\tab";     break;
				case '\n': os << "\\newline"; break;
				default:   os << '\\' << ast.value; break;
			}
		}
		void visit( ConstStringRef   ast, std::ostream& os ) const { os << '"' << ast.value << '"'; }
		void visit( ConstVariableRef ast, std::ostream& os ) const { os << ast.name;  }
		void visit( ConstQuoteRef    ast, std::ostream& os ) const { os << "'" << ast.value; }
		void visit( ConstIfRef       ast, std::ostream& os ) const { 	
			os << "(if " << ast.test << " " << ast.thenBranch << " " << ast.elseBranch << ")"; 
		}
		void visit( ConstDoRef       ast, std::ostream& os ) const {
			os << "(do " << ast.exprs.front();
			for ( auto it = ast.exprs.begin()++, end = ast.exprs.end(); it != end; ++it ) {
				os << ' ' << (*it);
			}
			os << ")";
		}
		void visit( ConstDefineRef   ast, std::ostream& os ) const {
			os << "(define " << ast.var.name << " " << ast.var.value << ")";
		}
		void visit( ConstLetRef      ast, std::ostream& os ) const {
			os << "(let (";

			visit_( ast.bindings.front(), os );
			for ( auto it = ++(ast.bindings.begin()), end = ast.bindings.end(); it != end; ++it ) {
				os << " ";
				visit_( *it, os );
			}

			os << ") " << ast.expr;
			os << ")";
		}
		void visit( ConstLambdaRef ast, std::ostream& os ) const {
			os << "(lambda (";

			os << ast.parameters.front();
			for ( auto it = ++(ast.parameters.begin()), end = ast.parameters.end(); it != end; ++it ) {
				os << " " << *it;
			}

			os << ") " << ast.expr;
			os << ")";
		}
		void visit( ConstApplicationRef ast, std::ostream& os ) const {
			os << '(';
			os << ast.fun;
			for ( auto it = ast.args.begin(), end = ast.args.end(); it != end; ++it ) {
				os << ' ' << *it;
			}
			os << ')';
		}

		void visit_( ConstLocalVariablePtr binding, std::ostream& os ) const {
			os << '(' << binding->name << ' ' << binding->value << ')';
		}
	};

	ast.visit<void,Visitor,std::ostream&>( Visitor(), os );

	return os;
}

